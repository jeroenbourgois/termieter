#!/usr/bin/env bash

wget -N --quiet https://raw.github.com/pierot/server-installer/master/lib.sh; . ./lib.sh

###############################################################################

install_dir='.termieter'

###############################################################################

_usage() {
  _print "

Usage:              install.sh -d ['.termieter']

Remote Usage:       bash <( curl -s https://raw.github.com/pierot/termieter/master/install.sh ) [-d '.termieter']

Options:

  -h                Show this message
  -d '.termieter'   Install directory (always in $HOME folder)
  "

  exit 0
}

###############################################################################

while getopts :hd: opt; do
  case $opt in
    h)
      _usage
      ;;
    d)
      install_dir="$HOME/$OPTARG"
      ;;
    *)
      _error "Invalid option received"
      _usage

      exit 0
      ;;
  esac
done

###############################################################################

# Git
GIT_INSTALLED=true
hash git 2>&- || { _error "I require git but it's not installed!"; GIT_INSTALLED=false; }

if ! $GIT_INSTALLED; then
  while true
  do
    read -p "Do you want me to install git? (sudo needed) [Y/N] " RESP

    case $RESP
      in
      [yY])
        _check_root
        _system_installs_install 'git'

        GIT_INSTALLED=true
        break
        ;;
      [nN])
        break
        ;;
      *)
        echo "Please enter Y or N"
    esac
  done
fi

# WGet
hash wget 2>&- || { _error "I require wget but it's not installed!"; exit 1; }

###############################################################################

cd ~

_print "Removing current termieter installation"

rm -rf "$install_dir"

if [ ! -d "$install_dir" ]; then
  if $GIT_INSTALLED; then
    git clone git://github.com/pierot/termieter.git "$install_dir"
  fi
fi

if [ ! -d "$install_dir" ]; then
  _error "Termieter doesn't seem to be installed correctly. Aborting"

  exit 1
fi

###############################################################################

mkdir -p ~/.bash_backup

_back_install() {
  _print "Installing $1"

  if [ ! -n "$1" ]; then
    _error "Error in install script. Aborting"

    exit 1
  fi

  if [ -f "$HOME/.$1" ]; then
    mv "$HOME/.$1" "$HOME/.bash_backup/.$1"
  fi

  if [ -f "$install_dir/symlinks/$1" ]; then
    if [ -n "$2" ]; then
      ln -sf "$install_dir/symlinks/$1" "$HOME/.$2"
    else
      ln -sf "$install_dir/symlinks/$1" "$HOME/.$1"
    fi
  fi
}

for sym_file in $install_dir/symlinks/*
do
  _back_install $(basename $sym_file)
done

###############################################################################

cd $install_dir

_print "Init submodules"

git submodule update --init

_print "Init custom plugins"

if [ ! -d "zsh/oh-my-zsh/custom/plugins" ]; then
  mkdir "zsh/oh-my-zsh/custom/plugins"
fi

_print "Init pure prompt"

if [ ! -d "zsh/oh-my-zsh/functions" ]; then
  mkdir "zsh/oh-my-zsh/functions"
fi

ln -sf "$HOME/$install_dir/zsh/pure.zsh" "$HOME/$install_dir/zsh/oh-my-zsh/functions/prompt_pure_setup"
ln -sf "$HOME/$install_dir/zsh/async.zsh" "$HOME/$install_dir/zsh/oh-my-zsh/functions/async"

if [ -d "$HOME/$install_dir/tmux/tmux-resurrect" ] ; then
  _success "tmux-resurrect is already installed"
else
  git clone https://github.com/tmux-plugins/tmux-resurrect $HOME/$install_dir/tmux/tmux-resurrect
fi

if [ -d "$HOME/$install_dir/tmux/tmux-resurrect-auto" ] ; then
  _success "tmux-resurrect is already installed-auto"
else
  git clone https://github.com/tmux-plugins/tmux-resurrect-auto $HOME/$install_dir/tmux/tmux-resurrect-auto
fi

hash gdircolors 2>&- || { _error "I require coreutils but it's not installed! Trying to .."; CORE_UTILS_INSTALLED=false; }

if ! $CORE_UTILS_INSTALLED; then
  hash brew 2>&- || { _error "I require homebrew but it's not installed! No gdircolors for you!"; HOMEBREW_INSTALLED=false; }

  if $HOMEBREW_INSTALLED; then
    brew install coreutils
  fi
fi

_cleanup_lib

while true
do
  read -p "Do you want me to switch to zsh as default shell? (sudo needed) [Y/N] " RESP

  case $RESP
    in
    [yY])
      _check_root

      sudo chsh -s /bin/zsh $USER

      break
      ;;
    [nN])
      break
      ;;
    *)
      echo "Please enter Y or N"
  esac
done

_print "Installation finished"
